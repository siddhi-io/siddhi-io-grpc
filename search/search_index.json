{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"siddhi-io-grpc The siddhi-io-grpc extension is an extension to Siddhi that receives and publishes events via gRPC protocol, calls external services, and serves incoming requests and provide responses. For information on Siddhi and it's features refer Siddhi Documentation . Download from here . Latest API Docs Latest API Docs is 1.0.13 . Features grpc ( Sink ) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . grpc-call ( Sink ) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . grpc-service-response ( Sink ) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id grpc ( Source ) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. grpc-call-response ( Source ) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping grpc-service ( Source ) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Dependencies Add following protobuf jar into {SIDDHI_HOME}/bundles * protobuf-java-3.9.1.jar Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-grpc","text":"The siddhi-io-grpc extension is an extension to Siddhi that receives and publishes events via gRPC protocol, calls external services, and serves incoming requests and provide responses. For information on Siddhi and it's features refer Siddhi Documentation .","title":"siddhi-io-grpc"},{"location":"#download","text":"from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 1.0.13 .","title":"Latest API Docs"},{"location":"#features","text":"grpc ( Sink ) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . grpc-call ( Sink ) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . grpc-service-response ( Sink ) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id grpc ( Source ) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. grpc-call-response ( Source ) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping grpc-service ( Source ) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format.","title":"Features"},{"location":"#dependencies","text":"Add following protobuf jar into {SIDDHI_HOME}/bundles * protobuf-java-3.9.1.jar","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0-beta/","text":"API Docs - v1.0.0-beta Tested Siddhi Core version: 5.1.3 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.test.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink.A grpc servershould be running at 194.23.98.100 listening to port 8080, since there is no mapper provided, attributes of stream definition should be same as the attributes of protobuf message definition grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', sink.id= '1') define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. since there is no mapping available stream definition attributes names should be as same as the attributes of the protobuf message definition grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this source will use EventService consume method. This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/send', @map(type='protobuf', )) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is give as 8888. So a grpc server will be started on port 8888 and sever will be keep listening to the 'send method in the 'MyService' service. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients.source.id is set as 1.So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response.","title":"1.0.0-beta"},{"location":"api/1.0.0-beta/#api-docs-v100-beta","text":"Tested Siddhi Core version: 5.1.3 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.0-beta"},{"location":"api/1.0.0-beta/#sink","text":"","title":"Sink"},{"location":"api/1.0.0-beta/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.test.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink.A grpc servershould be running at 194.23.98.100 listening to port 8080, since there is no mapper provided, attributes of stream definition should be same as the attributes of protobuf message definition","title":"grpc (Sink)"},{"location":"api/1.0.0-beta/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', sink.id= '1') define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. since there is no mapping available stream definition attributes names should be as same as the attributes of the protobuf message definition","title":"grpc-call (Sink)"},{"location":"api/1.0.0-beta/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.0-beta/#source","text":"","title":"Source"},{"location":"api/1.0.0-beta/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this source will use EventService consume method. This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/send', @map(type='protobuf', )) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is give as 8888. So a grpc server will be started on port 8888 and sever will be keep listening to the 'send method in the 'MyService' service.","title":"grpc (Source)"},{"location":"api/1.0.0-beta/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.0-beta/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host address, port, service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients.source.id is set as 1.So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response.","title":"grpc-service (Source)"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method(look the sample proto file that provided in the resource folder [here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)).Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this source will use EventService consume method. This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method(look the sample proto file that provided in the resource folder [here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)).Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.0/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.0/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this source will use EventService consume method. This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.0/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.0/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.1/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.1/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.1/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.1/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#sink","text":"","title":"Sink"},{"location":"api/1.0.10/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.10/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.10/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.10/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.10/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#sink","text":"","title":"Sink"},{"location":"api/1.0.11/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.11/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.11/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.11/#source","text":"","title":"Source"},{"location":"api/1.0.11/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.11/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.11/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#sink","text":"","title":"Sink"},{"location":"api/1.0.12/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.12/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.12/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.12/#source","text":"","title":"Source"},{"location":"api/1.0.12/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.12/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.12/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#sink","text":"","title":"Sink"},{"location":"api/1.0.13/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.13/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.13/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.13/#source","text":"","title":"Source"},{"location":"api/1.0.13/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.13/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.13/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.2/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.2/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.2/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.2/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.3/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.3/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.3/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.3/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.4/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.4/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.4/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.4/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.5/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.5/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.5/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.5/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#sink","text":"","title":"Sink"},{"location":"api/1.0.6/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.6/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.6/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.6/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.6/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#sink","text":"","title":"Sink"},{"location":"api/1.0.7/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.7/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.7/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.7/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.7/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path src/main/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path src/main/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink grpc (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#sink","text":"","title":"Sink"},{"location":"api/1.0.8/#grpc-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc sink is used for scenarios where we send a request and don't expect a response back. I.e getting a google.protobuf.Empty response back. Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.8/#grpc-call-sink","text":"This extension publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called \"EventService\". Please find the protobuf definition here . If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source. Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.8/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService. Please find the proto definition here . In the default mode this source will use EventService consume method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.8/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.8/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService. Please find the proto definition here In the default mode this will use the EventService process method. If we want to use our custom gRPC services, we have to pack auto-generated gRPC service classes and protobuf classes into a jar file and add it into the project classpath (or to the jars folder in the siddhi-tooling folder if we use it with siddhi-tooling ). Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses GrpcServiceResponse sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#sink","text":"","title":"Sink"},{"location":"api/1.0.9/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/1.0.9/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/1.0.9/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/1.0.9/#source","text":"","title":"Source"},{"location":"api/1.0.9/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/1.0.9/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/1.0.9/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"},{"location":"api/latest/","text":"API Docs - v1.0.13 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink grpc (Sink) gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type. grpc-call (Sink) grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes. grpc-service-response (Sink) This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. Source grpc (Source) This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client. grpc-call-response (Source) This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream grpc-service (Source) This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"latest"},{"location":"api/latest/#api-docs-v1013","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.13"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#grpc-sink","text":"gRPC sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes added. The default service is called EventService . This grpc sink is used for scenarios where we send a request and don't expect a response back(getting a google.protobuf.Empty response back). Please find the default protobuf definition here . Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc , publisher.url= STRING , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', @map(type='json')) define stream FooStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/consume the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.EventService/consume', headers='{{headers}}', @map(type='json'), @payload('{{message}}')) define stream FooStream (message String, headers String); A similar example to above but with headers. Headers are also send into the stream as a data. In the sink headers dynamic property reads the value and sends it as MetaData with the request EXAMPLE 3 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/send', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080 since there is no mapper provided, attributes of stream definition should be as same as the attributes of protobuf message definition. EXAMPLE 4 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf'), define stream FooStream (stringValue string, intValue int,map object); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 134.23.43.35 listening to port 8080. The 'map object' in the stream definition defines that this stream is going to use Map object with grpc service. We can use any map object that extends 'java.util.AbstractMap' class. EXAMPLE 5 @sink(type='grpc', publisher.url = 'grpc://134.23.43.35:8080/org.wso2.grpc.MyService/testMap', @map(type='protobuf', @payload(stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue = 'f'))) define stream FooStream (a string, b long, c int,d bool,e float,f double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. @payload is provided in this stream, therefore we can use any name for the attributes in the stream definition, but we should correctly map those names with protobuf message attributes. If we are planning to send metadata within a stream we should use @payload to map attributes to identify the metadata attribute and the protobuf attributes separately. EXAMPLE 6 @sink(type='grpc', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.StreamService/clientStream', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here in the grpc sink, we are sending a stream of requests to the server that runs on 194.23.98.100 and port 8888. When we need to send a stream of requests from the grpc sink we have to define a client stream RPC method.Then the siddhi will identify whether it's a unary method or a stream method and send requests according to the method type.","title":"grpc (Sink)"},{"location":"api/latest/#grpc-call-sink","text":"grpc-call sink publishes event data encoded into GRPC Classes as defined in the user input jar. This extension has a default gRPC service classes jar added. The default service is called EventService . This grpc-call sink is used for scenarios where we send a request out and expect a response back. In default mode this will use EventService process method. grpc-call-response source is used to receive the responses. A unique sink.id is used to correlate between the sink and its corresponding source.Please find the default protobuf definition here .Please find the custom protobuf definition that uses in examples here . Syntax @sink(type= grpc-call , publisher.url= STRING , sink.id= INT , headers= STRING , idle.timeout= LONG , keep.alive.time= LONG , keep.alive.timeout= LONG , keep.alive.without.calls= BOOL , enable.retry= BOOL , max.retry.attempts= INT , retry.buffer.size= LONG , per.rpc.buffer.size= LONG , channel.termination.waiting.time= LONG , max.inbound.message.size= LONG , max.inbound.metadata.size= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The url to which the outgoing events should be published via this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No sink.id a unique ID that should be set for each grpc-call-sink. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the source also. INT No No headers GRPC Request headers in format \"' key : value ',' key : value '\" . If header parameter is not provided just the payload is sent - STRING Yes No idle.timeout Set the duration in seconds without ongoing RPCs before going to idle mode. 1800 LONG Yes No keep.alive.time Sets the time in seconds without read activity before sending a keepalive ping. Keepalives can increase the load on services so must be used with caution. By default set to Long.MAX_VALUE which disables keep alive pinging. Long.MAX_VALUE LONG Yes No keep.alive.timeout Sets the time in seconds waiting for read activity after sending a keepalive ping. 20 LONG Yes No keep.alive.without.calls Sets whether keepalive will be performed when there are no outstanding RPC on a connection. false BOOL Yes No enable.retry Enables the retry and hedging mechanism provided by the gRPC library. false BOOL Yes No max.retry.attempts Sets max number of retry attempts. The total number of retry attempts for each RPC will not exceed this number even if service config may allow a higher number. 5 INT Yes No retry.buffer.size Sets the retry buffer size in bytes. If the buffer limit is exceeded, no RPC could retry at the moment, and in hedging case all hedges but one of the same RPC will cancel. 16777216 LONG Yes No per.rpc.buffer.size Sets the per RPC buffer limit in bytes used for retry. The RPC is not retriable if its buffer limit is exceeded. 1048576 LONG Yes No channel.termination.waiting.time The time in seconds to wait for the channel to become terminated, giving up if the timeout is reached. 5 LONG Yes No max.inbound.message.size Sets the maximum message size allowed to be received on the channel in bytes 4194304 LONG Yes No max.inbound.metadata.size Sets the maximum size of metadata allowed to be received in bytes 8192 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No Examples EXAMPLE 1 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. sink.id is set to 1 here. So we can write a source with sink.id 1 so that it will listen to responses for requests published from this stream. Note that since we are using EventService/process the sink will be operating in default mode EXAMPLE 2 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. EXAMPLE 3 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf')) define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.MyService/process', sink.id= '1', @map(type='protobuf'))define stream FooStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here a stream named FooStream is defined with grpc sink. A grpc server should be running at 194.23.98.100 listening to port 8080. We have added another stream called BarStream which is a grpc-call-response source with the same sink.id 1 and as same as FooStream definition. So the responses for calls sent from the FooStream will be added to BarStream. Since there is no mapping available in the stream definition attributes names should be as same as the attributes of the protobuf message definition. (Here the only reason we provide receiver.url in the grpc-call-response source is for protobuf mapper to map Response into a siddhi event, we can give any address and any port number in the URL, but we should provide the service name and the method name correctly) EXAMPLE 4 @sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf', @payload(stringValue='a',longValue='c',intValue='b',booleanValue='d',floatValue = 'e', doubleValue = 'f')))define stream FooStream (a string, b int,c long,d bool,e float,f double); @source(type='grpc-call-response', receiver.url = 'grpc://localhost:8888/org.wso2.grpc.test.MyService/process', sink.id= '1', @map(type='protobuf',@attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue')))define stream FooStream (a string, b int,c long,d bool,e float,f double); Here with the same FooStream definition we have added a BarStream which has a grpc-call-response source with the same sink.id 1. So the responses for calls sent from the FooStream will be added to BarStream. In this stream we provided mapping for both the sink and the source. so we can use any name for the attributes in the stream definition, but we have to map those attributes with correct protobuf attributes. As same as the grpc-sink, if we are planning to use metadata we should map the attributes.","title":"grpc-call (Sink)"},{"location":"api/latest/#grpc-service-response-sink","text":"This extension is used to send responses back to a gRPC client after receiving requests through grpc-service source. This correlates with the particular source using a unique source.id Syntax @sink(type= grpc-service-response , source.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id A unique id to identify the correct source to which this sink is mapped. There is a 1:1 mapping between source and sink INT No No Examples EXAMPLE 1 @sink(type='grpc-service-response', source.id='1', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream.","title":"grpc-service-response (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#grpc-source","text":"This extension starts a grpc server during initialization time. The server listens to requests from grpc stubs. This source has a default mode of operation and custom user defined grpc service mode. By default this uses EventService . Please find the proto definition here . In the default mode this source will use EventService consume method. Please find the custom protobuf definition that uses in examples here . This method will receive requests and injects them into stream through a mapper. Syntax @source(type= grpc , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and keystore.file or truststore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile Path of the key store file ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json')) define stream BarStream (message String); Here the port is given as 8888. So a grpc server will be started on port 8888 and the server will expose EventService. This is the default service packed with the source. In EventService the consume method is EXAMPLE 2 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 3 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' RPC method in the 'MyService' service. EXAMPLE 4 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.MyService/send', @map(type='protobuf', @attributes(a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e ='floatValue', f ='doubleValue'))) define stream BarStream (a string ,c long,b int, d bool,e float,f double); Here the port is given as 8888. So a grpc server will be started on port 8888 and sever will keep listening to the 'send' method in the 'MyService' service. Since we provide mapping in the stream we can use any names for stream attributes, but we have to map those names with correct protobuf message attributes' names. If we want to send metadata, we should map the attributes. EXAMPLE 5 @source(type='grpc', receiver.url='grpc://localhost:8888/org.wso2.grpc.StreamService/clientStream', @map(type='protobuf')) define stream BarStream (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double); Here we receive a stream of requests to the grpc source. Whenever we want to use streaming with grpc source, we have to define the RPC method as client streaming method (look at the sample proto file provided in the resource folder[here](https://github.com/siddhi-io/siddhi-io-grpc/tree/master/component/src/main/resources)), when we define a stream method siddhi will identify it as a stream RPC method and ready to accept stream of request from the client.","title":"grpc (Source)"},{"location":"api/latest/#grpc-call-response-source","text":"This grpc source receives responses received from gRPC server for requests sent from a grpc-call sink. The source will receive responses for sink with the same sink.id. For example if you have a gRPC sink with sink.id 15 then we need to set the sink.id as 15 in the source to receives responses. Sinks and sources have 1:1 mapping Syntax @source(type= grpc-call-response , sink.id= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also. INT No No Examples EXAMPLE 1 @source(type='grpc-call-response', sink.id= '1') define stream BarStream (message String);@sink(type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', @map(type='json')) define stream FooStream (message String); Here we are listening to responses for requests sent from the sink with sink.id 1 will be received here. The results will be injected into BarStream","title":"grpc-call-response (Source)"},{"location":"api/latest/#grpc-service-source","text":"This extension implements a grpc server for receiving and responding to requests. During initialization time a grpc server is started on the user specified port exposing the required service as given in the url. This source also has a default mode and a user defined grpc service mode. By default this uses EventService . Please find the proto definition here In the default mode this will use the EventService process method. Please find the custom protobuf definition that uses in examples here . This accepts grpc message class Event as defined in the EventService proto. This uses grpc-service-response sink to send reponses back in the same Event message format. Syntax @source(type= grpc-service , receiver.url= STRING , max.inbound.message.size= INT , max.inbound.metadata.size= INT , service.timeout= INT , server.shutdown.waiting.time= LONG , truststore.file= STRING , truststore.password= STRING , truststore.algorithm= STRING , tls.store.type= STRING , keystore.file= STRING , keystore.password= STRING , keystore.algorithm= STRING , enable.ssl= BOOL , mutual.auth.enabled= BOOL , threadpool.size= INT , threadpool.buffer.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. grpc://0.0.0.0:9763/ serviceName / methodName For example: grpc://0.0.0.0:9763/org.wso2.grpc.EventService/consume STRING No No max.inbound.message.size Sets the maximum message size in bytes allowed to be received on the server. 4194304 INT Yes No max.inbound.metadata.size Sets the maximum size of metadata in bytes allowed to be received. 8192 INT Yes No service.timeout The period of time in milliseconds to wait for siddhi to respond to a request received. After this time period of receiving a request it will be closed with an error message. 10000 INT Yes No server.shutdown.waiting.time The time in seconds to wait for the server to shutdown, giving up if the timeout is reached. 5 LONG Yes No truststore.file the file path of truststore. If this is provided then server authentication is enabled - STRING Yes No truststore.password the password of truststore. If this is provided then the integrity of the keystore is checked - STRING Yes No truststore.algorithm the encryption algorithm to be used for server authentication - STRING Yes No tls.store.type TLS store type - STRING Yes No keystore.file the file path of keystore. If this is provided then client authentication is enabled - STRING Yes No keystore.password the password of keystore - STRING Yes No keystore.algorithm the encryption algorithm to be used for client authentication - STRING Yes No enable.ssl to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No mutual.auth.enabled to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default FALSE BOOL Yes No threadpool.size Sets the maximum size of threadpool dedicated to serve requests at the gRPC server 100 INT Yes No threadpool.buffer.size Sets the maximum size of threadpool buffer server 100 INT Yes No System Parameters Name Description Default Value Possible Parameters keyStoreFile This is the key store file with the path ${carbon.home}/resources/security/wso2carbon.jks valid path for a key store file keyStorePassword This is the password used with key store file wso2carbon valid password for the key store file keyStoreAlgorithm The encryption algorithm to be used for client authentication SunX509 - trustStoreFile This is the trust store file with the path ${carbon.home}/resources/security/client-truststore.jks - trustStorePassword This is the password used with trust store file wso2carbon valid password for the trust store file trustStoreAlgorithm the encryption algorithm to be used for server authentication SunX509 - Examples EXAMPLE 1 @source(type='grpc-service', receiver.url='grpc://localhost:8888/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); Here a grpc server will be started at port 8888. The process method of EventService will be exposed for clients. source.id is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response. EXAMPLE 2 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='json')) define stream BarStream (messageId String, message String); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.wso2.grpc.EventService/process', source.id='1', @map(type='json', @attributes(messageId='trp:messageId', message='message'))) define stream FooStream (messageId String, message String); from FooStream select * insert into BarStream; The grpc requests are received through the grpc-service sink. Each received event is sent back through grpc-service-source. This is just a passthrough through Siddhi as we are selecting everything from FooStream and inserting into BarStream. EXAMPLE 3 @source(type='grpc-service', source.id='1' receiver.url='grpc://locanhost:8888/org.wso2.grpc.EventService/consume', @map(type='json', @attributes(name='trp:name', age='trp:age', message='message'))) define stream BarStream (message String, name String, age int); Here we are getting headers sent with the request as transport properties and injecting them into the stream. With each request a header will be sent in MetaData in the following format: 'Name:John', 'Age:23' EXAMPLE 4 @sink(type='grpc-service-response', source.id='1', message.id='{{messageId}}', @map(type='protobuf', @payload(stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'))) define stream BarStream (a string,messageId string, b int,c long,d bool,e float,f double); @source(type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.wso2.grpc.test.MyService/process', source.id='1', @map(type='protobuf', @attributes(messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'))) define stream FooStream (a string,messageId string, b int,c long,d bool,e float,f double); from FooStream select * insert into BarStream; Here a grpc server will be started at port 8888. The process method of the MyService will be exposed to the clients. 'source.id' is set as 1. So a grpc-service-response sink with source.id = 1 will send responses back for requests received to this source. Note that it is required to specify the transport property messageId since we need to correlate the request message with the response and also we should map stream attributes with correct protobuf message attributes even they define using the same name as protobuf message attributes.","title":"grpc-service (Source)"}]}